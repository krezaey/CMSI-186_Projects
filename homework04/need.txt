Prereqs of the program:
	-need to have stationary object
	-arguments consist of x, y, x movement, y movement

Goals of the program:
	-need to detect collisions
	-if ball goes out of bounds, it is no longer a part of the         	simulation
	-simulation stops when collision detected, report the earliest 	time when the balls collide

Tips for designing:
	-ball radius is 4.45 inches, if distance between two centers is <= 8.9 inches, use pythagorean theorem, it is collision
	-if odd number of time slices, probable number fo time slices
	-use (args.length % 4) - 1 to validate arguments, balls must defined by groups of 4, last argument is an optional argument
	-multiply by 0.99 per tick to account for friction

Ball Class
	-x coordinate
	-y coordinate
	-x velocity
	-y velocity
	-arguments should be double types
		-args.length / 4 = number of balls (Math.floor or take integer) for when odd number of args
		-have array of ball objects

		int numBall = (int) args.length / 4
		ball[] b = new Ball[numBall] (setting array with set number of balls calculated)
		int j = 0; 
		for (int i = 0; i < args.length; i+=4) {
			b[j] = new Ball (args[i], args[i+1], args[i+2], args[i+3]);
			j++;
		}

		-use 2 different loops and 
	-methods
		-constructor
		-move()
		-updateVelocity()
		-isInMotion() -- boolean; moving if >= 1 inch per second
		-getLocation()
		-getSpeed()
		-locationToString()
		-isInBounds()
		-main method for testing

Timer Class
	-time slice
	-total seconds
	-methods
		-constructor
		-tick()
		-toString()
		-main method for testing

SoccerSim Class
	-x size for field (random size >= 100 and < 1500)
	-y size for field (random size >= 100 and < 1500)
	-random location for pole
	-number of balls
	-time slice (passing in arguments here)
	-array of ball objects[]
	-methods
		-constructor
		-main method
		-validateArguments()

TO DO
-finish timer Class
-finsih ball Class
	-add validate args 
-write tests for ball Class
-validate args in SoccerSim


