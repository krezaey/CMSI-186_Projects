~~~~~BigInt.java~~~~~

INTRODUCTION TO PROGRAM

BigInt java class exists; cannot use it; program will replicate it. 

Used to add an arbitrarily long integer and use it to do operations
however, arbitrarily long number can only be used in program if 
represented by string. 

How can we do mathmatical operations involving integers with these strings?

i.e "12343210957409123097412341203947123049712" + 11

Need to convert 11 to string, but adding will result in string concatenation. 

Thus, we need to translate to different data types to do operations by 
chunking the string. 

We can use bytes, the smallest data type which is 8 bits. 
The biggest integer we can use to divide into chunks in a byte is 255, 
which is weird number, so we use 99 instead, which still fits into a byte.
We don't want to deal with 3 digit numbers because they can be larger than 100, 
thus 99.

However, we can't do operations with bytes. Thus, we will actually use integers, which is 32 bits.
The biggest value that we can handle with 999999999, which is 9 digits. Thus, our chunk 
size is 9 digits. 

i.e 123456789-123456789-123456789-12345

We can chunk this into 4 chunks.
Our length is s.length() == 32, the number of digits. 

STARTING THE PROGRAM

//program fields

String internal = "";
final int CHUNK_SIZE = 9;
int sign = 0;

//constructor

public BrobInt (s) {
    internal = s; //preserving the original String passed through
    int chunks = (internal.length() / CHUNK_SIZE); //number of chunks needed for the passed BrobInt
    if ( s.length mod CHUNK_SIZE != 0 ) {
        chunks ++;
    }
    int[] RA = new int[chunks];
    int start = s.length() - 1;
    int stop = stop - 8;

    for ( int i = 0; i < chunks; i++ ) {

        //or we can do it backwards to reflect the correct order of BrobInt
        //this is what the array currently looks like
        //RA[2] = 123456789
        //RA[1] = 123456789
        //RA[0] = 12345
        //wrong order
        //or you can use reverser method provided, use the string buffer, look up in Java API
        //for ( int i = chunks; i > 0, i-- ) {}

        RA[i] = Integer.parseInt(s.substring(start, stop));
        stop -= 9;

        if ( i == chunks - 1 ) { 
            start = 0 
        }
        else {
            start -= 9;
        }

        if (s.charAt(0) == '-' ) {
            sign = 1;
        }
    }
}

//toString method

public String toString() {
    if ( sign == 1 ) {
        return "-" + internal;
    }
    return response;
}

*** OPTIONAL ***

private static final boolean DEBUG_ON = true;

whereever you need it, whatever method (like, for example, every step of subratction):

you can put  if (DEBUG_ON) {
    toArray(RA);
}

when done debugging, can change DEBUG_ON = false;

REMAINDER method

return b1.subtract(b1.divide(b2).multiply(b2));